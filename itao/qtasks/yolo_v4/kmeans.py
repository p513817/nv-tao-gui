
from PyQt5.QtCore import QThread, pyqtSignal
import subprocess
import sys
from itao.environ import SetupEnv
from itao.utils.qt_logger import CustomLogger
from itao.qtasks.tools import parse_arguments

########################################################################

# !tao yolo_v4 kmeans -l $DATA_DOWNLOAD_DIR/training/label_2 \
#                     -i $DATA_DOWNLOAD_DIR/training/image_2 \
#                     -n 9 \
#                     -x 1248 \
#                     -y 384

class KmeansCMD(QThread):

    trigger = pyqtSignal(list)

    def __init__(self, args:dict ):
        super(KmeansCMD, self).__init__()
        
        self.logger = CustomLogger().get_logger('dev')
        self.env = SetupEnv() 
        
        
        key_args = [ 'task', 'train_image', 'train_label', 'n_ancher', 'image_width', 'image_height' ]
        ret, new_args, error_args = parse_arguments(key_args=key_args, in_args=args)
        if not ret:
            self.logger.error('Train: Input arguments is wrong: {}'.format(error_args))
            sys.exit(1)

        self.cmd = [
            "tao", f"{ new_args['task'] }", 'kmeans',
            "-i", f"{ new_args['train_image'] }",
            "-l", f"{ new_args['train_label'] }",
            "-n", f"{ new_args['n_ancher'] }",
            "-x", f"{ new_args['image_width'] }",
            "-y", f"{ new_args['image_height'] }"
        ]

        # check is in docker
        if args['is_docker'] and args['is_docker']==True:
            self.cmd.pop(0)
            

        # The anchor shape generated by this script is sorted. Write the first 3 into small_anchor_shape in the config
        # file. Write middle 3 into mid_anchor_shape. Write last 3 into big_anchor_shape.
        self.big_anchor_shape = []
        self.mid_anchor_shape = []
        self.small_anchor_shape = []
        self.anchor_shapes = [ self.small_anchor_shape, self.mid_anchor_shape, self.big_anchor_shape]
        self.anchor_nums = 0
        self.first_anchor = False

        
        self.logger.info('----------------')
        self.logger.info(self.cmd)
        self.logger.info('----------------')

        # 看到 symbols 就開始錄製
        self.symbols=['Please use following anchor sizes in YOLO config']
        self.record = False

    def check_float_in_string(self, value: str) -> bool:
        try:
            float(value)
            return True
        except ValueError:
            return False

    def run(self) -> list:
        proc = subprocess.Popen(self.cmd, stdout=subprocess.PIPE)
        while(True):
            if proc.poll() is not None or self.anchor_nums>=9:
                break
            for line in proc.stdout:
                
                line = line.decode('utf-8', 'ignore').rstrip('\n').replace(" ", "")
                self.logger.debug(line)

                if 'WARNING' in line or line.isspace(): 
                    continue

                if '(' in line and ')' in line and self.anchor_nums<9:
                    
                    if self.check_float_in_string(line.strip("()").split(',')[0]):

                        if self.anchor_nums%3==0:
                            self.first_anchor=True  
                        else:
                            self.first_anchor=False

                        idx = self.anchor_nums//3
                        
                        self.anchor_shapes[idx].append( "{}{}".format('' if self.first_anchor else ', ', line.rstrip('\r').replace(' ', '')))

                        self.anchor_nums = self.anchor_nums + 1                    
        
        small = "".join(self.anchor_shapes[0])
        mid = "".join(self.anchor_shapes[1])
        big = "".join(self.anchor_shapes[2])

        self.trigger.emit([small, mid, big])